{
	"info": {
		"_postman_id": "90fae1ab-5380-49f1-8838-167c745f293f",
		"name": "SQLVerifier",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33850823"
	},
	"item": [
		{
			"name": "auth tests",
			"item": [
				{
					"name": "happy path",
					"item": [
						{
							"name": "admin auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('id_token');",
											"});",
											"",
											"pm.test(\"Status code name has string 'OK'\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"id_token\", response.id_token);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\",\n    \"rememberMe\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}authenticate",
									"host": [
										"{{baseURL}}authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "student_user auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Body is correct\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('id_token');",
											"});",
											"pm.test(\"Status code name has string 'OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"anna_test_user\",\n    \"password\": \"annatest12345\",\n    \"rememberMe\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}authenticate",
									"host": [
										"{{baseURL}}authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "teacher_user auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Body is correct\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('id_token');",
											"});",
											"pm.test(\"Status code name has string 'OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"anna_teacher\",\n    \"password\": \"anna_teacher6789\",\n    \"rememberMe\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}authenticate",
									"host": [
										"{{baseURL}}authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth_remember_me_false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Body is correct\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('id_token');",
											"});",
											"pm.test(\"Status code name has string 'OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"anna_teacher\",\n    \"password\": \"anna_teacher6789\",\n    \"rememberMe\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}authenticate",
									"host": [
										"{{baseURL}}authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth_remember_me_true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Body is correct\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('id_token');",
											"});",
											"pm.test(\"Status code name has string 'OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"anna_teacher\",\n    \"password\": \"anna_teacher6789\",\n    \"rememberMe\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}authenticate",
									"host": [
										"{{baseURL}}authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "bad path",
					"item": [
						{
							"name": "auth as a non-activated user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Internal Server Error\", function () {",
											"    pm.response.to.have.status(\"Internal Server Error\");",
											"});",
											"pm.test(\"Response body has string about not activated account\", function () {  ",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"User test1 was not activated\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"test1\",\n    \"password\": \"test1test\",\n    \"rememberMe\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}authenticate",
									"host": [
										"{{baseURL}}authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "wrong user_data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Unauthorized\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"pm.test(\"Response body has string 'Неверные учетные данные пользователя'\", function () {  ",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Неверные учетные данные пользователя\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{$randomUserName}}\",\n    \"password\": \"{{$randomCountry}}\",\n    \"rememberMe\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}authenticate",
									"host": [
										"{{baseURL}}authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Response body has string 'размер должен находиться в диапазоне от 1 до 50'\", function () {  ",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.fieldErrors[0].message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"размер должен находиться в диапазоне от 1 до 50\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"\",\n    \"password\": \"admin\",\n    \"rememberMe\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}authenticate",
									"host": [
										"{{baseURL}}authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "wrong username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Unauthorized\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"pm.test(\"Response body has string 'Неверные учетные данные пользователя'\", function () {  ",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Неверные учетные данные пользователя\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin1\",\n    \"password\": \"admin\",\n    \"rememberMe\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}authenticate",
									"host": [
										"{{baseURL}}authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Response body has string 'размер должен находиться в диапазоне от 4 до 100'\", function () {  ",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.fieldErrors[0].message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"размер должен находиться в диапазоне от 4 до 100\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"\",\n    \"rememberMe\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}authenticate",
									"host": [
										"{{baseURL}}authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "wrong password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Unauthorized\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"pm.test(\"Response body has string 'Неверные учетные данные пользователя'\", function () {  ",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Неверные учетные данные пользователя\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin12345\",\n    \"rememberMe\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}authenticate",
									"host": [
										"{{baseURL}}authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty remember me",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\",\n    \"rememberMe\": \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}authenticate",
									"host": [
										"{{baseURL}}authenticate"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "user registration tests",
			"item": [
				{
					"name": "happy path",
					"item": [
						{
							"name": "register new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Created\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/account/register"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{$randomUserName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"langKey\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}register",
									"host": [
										"{{baseURL}}register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "bad path",
					"item": [
						{
							"name": "with same data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Bad request'\", function () {",
											"    pm.response.to.have.status(\"Bad request\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/account/register"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"test1\",\n    \"email\": \"test1@test.ru\",\n    \"password\": \"test1test\",\n    \"langKey\": \"en\"\n}\n\n//используются данные пользователя, который уже существует (зарегистрирован)",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}register",
									"host": [
										"{{baseURL}}register"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Bad Request'\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Response body has string 'не должно быть пустым'\", function () {  ",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.fieldErrors[1].message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"не должно быть пустым\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/account/register"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"\", // поле не заполнено\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"langKey\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}register",
									"host": [
										"{{baseURL}}register"
									]
								}
							},
							"response": []
						},
						{
							"name": "login >50",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Bad Request'\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Response body has string 'размер должен находиться в диапазоне от 1 до 50'\", function () {  ",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.fieldErrors[0].message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"размер должен находиться в диапазоне от 1 до 50\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/account/register"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"gggjkhkjshfkjhsfkljshflskhflksjfljmfglsndjbfcmfbggf\", // 51 символ в поле\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"langKey\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}register",
									"host": [
										"{{baseURL}}register"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/account/register"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{$randomUserName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"\", //пароль не заполнен\n    \"langKey\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}register",
									"host": [
										"{{baseURL}}register"
									]
								}
							},
							"response": []
						},
						{
							"name": "password <4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Bad Request'\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Response body has string 'размер должен находиться в диапазоне от 4 до 100'\", function () {  ",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.fieldErrors[0].message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"размер должен находиться в диапазоне от 4 до 100\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/account/register"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{$randomUserName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"111\", \n    \"langKey\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}register",
									"host": [
										"{{baseURL}}register"
									]
								}
							},
							"response": []
						},
						{
							"name": "password >100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Bad Request'\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Response body has string 'размер должен находиться в диапазоне от 4 до 100'\", function () {  ",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.fieldErrors[0].message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"размер должен находиться в диапазоне от 4 до 100\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/account/register"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{$randomUserName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"gggjkhkjshfkjhsfkljshflskhflksjfljmfglsndjbfcmfbgggjkhkjshfkjhsfkljshflskhflksjfljmfglsndjbfcmfbggghh\", \n    \"langKey\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}register",
									"host": [
										"{{baseURL}}register"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty langKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Bad Request'\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Response body has string 'размер должен находиться в диапазоне от 2 до 10'\", function () {  ",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.fieldErrors[0].message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"размер должен находиться в диапазоне от 2 до 10\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/account/register"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{$randomUserName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"langKey\": \"\" //не заполнено\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}register",
									"host": [
										"{{baseURL}}register"
									]
								}
							},
							"response": []
						},
						{
							"name": "langKey <2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Bad Request'\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Response body has string 'размер должен находиться в диапазоне от 2 до 10'\", function () {  ",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.fieldErrors[0].message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"размер должен находиться в диапазоне от 2 до 10\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/account/register"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{$randomUserName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"langKey\": \"e\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}register",
									"host": [
										"{{baseURL}}register"
									]
								}
							},
							"response": []
						},
						{
							"name": "langKey is number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Status code name has string 'Bad Request'\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/account/register"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{$randomUserName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"langKey\": \"237\" \n}\n\n//langKey должен быть в формате ISO 639-1 или ISO 639-2 и состоять из букв",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}register",
									"host": [
										"{{baseURL}}register"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "tasks",
			"item": [
				{
					"name": "create task",
					"item": [
						{
							"name": "happy path",
							"item": [
								{
									"name": "task creation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Created'\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Response body contains 'id'\", function () {",
													"    pm.expect(jsonData).to.have.property('id');",
													"});",
													"",
													"pm.test(\"Response body contains 'text'\", function () {",
													"    pm.expect(jsonData).to.have.property('text');",
													"});",
													"",
													"pm.test(\"Response body contains 'title'\", function () {",
													"    pm.expect(jsonData).to.have.property('title');",
													"});",
													"",
													"pm.environment.set(\"id\", jsonData.id);",
													"",
													"pm.test(\"Accept is present in response headers\", function () {",
													"    pm.response.to.have.header(\"Accept\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"text\": \"{{$randomColor}}\",\n  \"answer\": \"{{$randomCity}}\",\n  \"title\": \"{{$randomCountry}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks",
											"host": [
												"{{baseURL}}tasks"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "bad path",
							"item": [
								{
									"name": "empty data in fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Bad Request'\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"text\": \"\",\n  \"answer\": \"\",\n  \"title\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks",
											"host": [
												"{{baseURL}}tasks"
											]
										}
									},
									"response": []
								},
								{
									"name": "no auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Unauthorized'\", function () {",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"text\": \"{{$randomColor}}\",\n  \"answer\": \"{{$randomCity}}\",\n  \"title\": \"{{$randomCountry}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks",
											"host": [
												"{{baseURL}}tasks"
											]
										}
									},
									"response": []
								},
								{
									"name": "empty text_field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Bad Request'\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"text\": \"\",\n  \"answer\": \"{{$randomCity}}\",\n  \"title\": \"{{$randomCountry}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks",
											"host": [
												"{{baseURL}}tasks"
											]
										}
									},
									"response": []
								},
								{
									"name": "empty answer_field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Bad Request'\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"text\": \"{{$randomCity}}\",\n  \"answer\": \"\",\n  \"title\": \"{{$randomCountry}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks",
											"host": [
												"{{baseURL}}tasks"
											]
										}
									},
									"response": []
								},
								{
									"name": "empty title_field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Bad Request'\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"text\": \"{{$randomCity}}\",\n  \"answer\": \"{{$randomCountry}}\",\n  \"title\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks",
											"host": [
												"{{baseURL}}tasks"
											]
										}
									},
									"response": []
								},
								{
									"name": "int in fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Bad Request'\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"text\": 1,\n  \"answer\": 33,\n  \"title\": 234\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks",
											"host": [
												"{{baseURL}}tasks"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "get task",
					"item": [
						{
							"name": "happy path",
							"item": [
								{
									"name": "existing task",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string 'OK'\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Response body contains 'text'\", function () {",
													"    pm.expect(responseData).to.have.property('text');",
													"});",
													"",
													"pm.test(\"Response body contains 'answer'\", function () {",
													"    pm.expect(responseData).to.have.property('answer');",
													"});",
													"",
													"pm.test(\"Response body contains 'title'\", function () {",
													"    pm.expect(responseData).to.have.property('title');",
													"});",
													"",
													"pm.test(\"Response body contains 'id'\", function () {",
													"    pm.expect(responseData).to.have.property('id');",
													"});",
													"",
													"pm.test(\"ID is a non-negative integer\", function () {",
													"    pm.expect(responseData.id).to.be.a('number');",
													"    pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
													"});",
													"",
													"// Получаем id из переменных окружения",
													"let envId = pm.environment.get(\"id\");",
													"",
													"// Проверяем, что id в ответе совпадает с id из переменной окружения",
													"pm.test(\"ID from environment matches ID from response\", function () {",
													"    pm.expect(responseData.id).to.eql(envId);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseURL}}tasks/{{id}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "bad path",
							"item": [
								{
									"name": "non-existent task",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Not Found'\", function () {",
													"    pm.response.to.have.status(\"Not Found\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseURL}}tasks/{{$randomInt}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{$randomInt}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "no auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Unauthorized'\", function () {",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseURL}}tasks/{{id}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "update task",
					"item": [
						{
							"name": "happy path",
							"item": [
								{
									"name": "update task by admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string 'OK'\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Response body contains 'text'\", function () {",
													"    pm.expect(responseData).to.have.property('text');",
													"});",
													"",
													"pm.test(\"Response body contains 'answer'\", function () {",
													"    pm.expect(responseData).to.have.property('answer');",
													"});",
													"",
													"pm.test(\"Response body contains 'title'\", function () {",
													"    pm.expect(responseData).to.have.property('title');",
													"});",
													"",
													"pm.test(\"Response body contains 'id'\", function () {",
													"    pm.expect(responseData).to.have.property('id');",
													"});",
													"",
													"pm.test(\"ID is a non-negative integer\", function () {",
													"    pm.expect(responseData.id).to.be.a('number');",
													"    pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
													"});",
													"",
													"// Получаем id из переменных окружения",
													"let envId = pm.environment.get(\"id\");",
													"",
													"// Проверяем, что id в ответе совпадает с id из переменной окружения",
													"pm.test(\"ID from environment matches ID from response\", function () {",
													"    pm.expect(responseData.id).to.eql(envId);",
													"});",
													"",
													"pm.test(\"Accept is present in response headers\", function () {",
													"    pm.response.to.have.header(\"Accept\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{id}},\n  \"text\": \"sometext\",\n  \"answer\": \"someanswer\",\n  \"title\": \"sometitle\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks/{{id}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "bad path",
							"item": [
								{
									"name": "no auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Unauthorized'\", function () {",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{id}},\n  \"text\": \"sometext noauth\",\n  \"answer\": \"someanswer noauth\",\n  \"title\": \"sometitle noauth\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks/{{id}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "int in fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Bad Request'\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{id}},\n  \"text\": 3,\n  \"answer\": 189,\n  \"title\": 1789\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks/{{id}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update non-existent task",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Bad Request'\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{$randomInt}},\n  \"text\": 3,\n  \"answer\": 189,\n  \"title\": 1789\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks/{{$randomInt}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{$randomInt}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "partial update task",
					"item": [
						{
							"name": "happy path",
							"item": [
								{
									"name": "update all fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string 'OK'\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Response body contains 'text'\", function () {",
													"    pm.expect(responseData).to.have.property('text');",
													"});",
													"",
													"pm.test(\"Response body contains 'answer'\", function () {",
													"    pm.expect(responseData).to.have.property('answer');",
													"});",
													"",
													"pm.test(\"Response body contains 'title'\", function () {",
													"    pm.expect(responseData).to.have.property('title');",
													"});",
													"",
													"pm.test(\"Response body contains 'id'\", function () {",
													"    pm.expect(responseData).to.have.property('id');",
													"});",
													"",
													"pm.test(\"ID is a non-negative integer\", function () {",
													"    pm.expect(responseData.id).to.be.a('number');",
													"    pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
													"});",
													"",
													"// Получаем id из переменных окружения",
													"let envId = pm.environment.get(\"id\");",
													"",
													"// Проверяем, что id в ответе совпадает с id из переменной окружения",
													"pm.test(\"ID from environment matches ID from response\", function () {",
													"    pm.expect(responseData.id).to.eql(envId);",
													"});",
													"",
													"pm.test(\"Accept is present in response headers\", function () {",
													"    pm.response.to.have.header(\"Accept\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{id}},\n  \"text\": \"update text\",\n  \"answer\": \"update answer\",\n  \"title\": \"update title\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks/{{id}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string 'OK'\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Response body contains 'text'\", function () {",
													"    pm.expect(responseData).to.have.property('text');",
													"});",
													"",
													"pm.test(\"Response body contains 'answer'\", function () {",
													"    pm.expect(responseData).to.have.property('answer');",
													"});",
													"",
													"pm.test(\"Response body contains 'title'\", function () {",
													"    pm.expect(responseData).to.have.property('title');",
													"});",
													"",
													"pm.test(\"Response body contains 'id'\", function () {",
													"    pm.expect(responseData).to.have.property('id');",
													"});",
													"",
													"pm.test(\"ID is a non-negative integer\", function () {",
													"    pm.expect(responseData.id).to.be.a('number');",
													"    pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
													"});",
													"",
													"// Получаем id из переменных окружения",
													"let envId = pm.environment.get(\"id\");",
													"",
													"// Проверяем, что id в ответе совпадает с id из переменной окружения",
													"pm.test(\"ID from environment matches ID from response\", function () {",
													"    pm.expect(responseData.id).to.eql(envId);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{id}},\n  \"text\": \"update only text\",\n  \"answer\": \"update answer\",\n  \"title\": \"update title\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks/{{id}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update answer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string 'OK'\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Response body contains 'text'\", function () {",
													"    pm.expect(responseData).to.have.property('text');",
													"});",
													"",
													"pm.test(\"Response body contains 'answer'\", function () {",
													"    pm.expect(responseData).to.have.property('answer');",
													"});",
													"",
													"pm.test(\"Response body contains 'title'\", function () {",
													"    pm.expect(responseData).to.have.property('title');",
													"});",
													"",
													"pm.test(\"Response body contains 'id'\", function () {",
													"    pm.expect(responseData).to.have.property('id');",
													"});",
													"",
													"pm.test(\"ID is a non-negative integer\", function () {",
													"    pm.expect(responseData.id).to.be.a('number');",
													"    pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
													"});",
													"",
													"// Получаем id из переменных окружения",
													"let envId = pm.environment.get(\"id\");",
													"",
													"// Проверяем, что id в ответе совпадает с id из переменной окружения",
													"pm.test(\"ID from environment matches ID from response\", function () {",
													"    pm.expect(responseData.id).to.eql(envId);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{id}},\n    \"text\": \"update only text\",\n    \"answer\": \"update answer second step\",\n    \"title\": \"update title\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/tasks/{{id}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"tasks",
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string 'OK'\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Response body contains 'text'\", function () {",
													"    pm.expect(responseData).to.have.property('text');",
													"});",
													"",
													"pm.test(\"Response body contains 'answer'\", function () {",
													"    pm.expect(responseData).to.have.property('answer');",
													"});",
													"",
													"pm.test(\"Response body contains 'title'\", function () {",
													"    pm.expect(responseData).to.have.property('title');",
													"});",
													"",
													"pm.test(\"Response body contains 'id'\", function () {",
													"    pm.expect(responseData).to.have.property('id');",
													"});",
													"",
													"pm.test(\"ID is a non-negative integer\", function () {",
													"    pm.expect(responseData.id).to.be.a('number');",
													"    pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
													"});",
													"",
													"// Получаем id из переменных окружения",
													"let envId = pm.environment.get(\"id\");",
													"",
													"// Проверяем, что id в ответе совпадает с id из переменной окружения",
													"pm.test(\"ID from environment matches ID from response\", function () {",
													"    pm.expect(responseData.id).to.eql(envId);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{id}},\n    \"text\": \"update only text\",\n    \"answer\": \"update answer second step\",\n    \"title\": \"update title third step\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/tasks/{{id}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"tasks",
												"{{id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "bad path",
							"item": [
								{
									"name": "no auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Unauthorized'\", function () {",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{id}},\n  \"text\": \"update no auth\",\n  \"answer\": \"update no auth\",\n  \"title\": \"update no auth\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks/{{id}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "int in fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Status code name has string 'Bad Request'\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{id}},\n  \"text\": 8,\n  \"answer\": 56,\n  \"title\": 786\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}tasks/{{id}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "delete task",
					"item": [
						{
							"name": "happy path",
							"item": [
								{
									"name": "delete task",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"pm.test(\"Status code name has string 'No Content'\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseURL}}tasks/{{id}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "bad path",
							"item": [
								{
									"name": "no auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"pm.test(\"Status code name has string 'Unauthorized'\", function () {",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseURL}}tasks/{{id}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "empty taskId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Status code name has string 'Bad Request'\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseURL}}tasks/",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "non-existent task",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Status code name has string 'Bad Request'\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseURL}}tasks/{{$randomInt}}",
											"host": [
												"{{baseURL}}tasks"
											],
											"path": [
												"{{$randomInt}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get all tasks",
					"item": [
						{
							"name": "happy path",
							"item": [
								{
									"name": "get all tasks success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Status code name has string 'OK'\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"// Проверка, что ответ — массив",
													"pm.test(\"Response is an array\", function () {",
													"    pm.expect(pm.response.json()).to.be.an(\"array\");",
													"});",
													"",
													"// Проверка, что массив содержит хотя бы один объект",
													"pm.test(\"Array contains at least one object\", function () {",
													"    pm.expect(pm.response.json().length).to.be.above(0);",
													"});",
													"",
													"// Проверка структуры каждого объекта в массиве",
													"pm.test(\"Each object has expected properties\", function () {",
													"    pm.response.json().forEach(item => {",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"text\");",
													"        pm.expect(item).to.have.property(\"answer\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"",
													"        pm.expect(item.id).to.be.a(\"number\");",
													"        pm.expect(item.text).to.be.a(\"string\");",
													"        pm.expect(item.answer).to.be.a(\"string\");",
													"        pm.expect(item.title).to.be.a(\"string\");",
													"    });",
													"});",
													"",
													"pm.test(\"Accept is present in response headers\", function () {",
													"    pm.response.to.have.header(\"Accept\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcyODE1NDY4NiwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MjgwNjgyODZ9.ZVQHVd18asCmybsjB01qoCKc06a22IJktpoYkJv9nHKD3HAJtFowY6gIhwEc9olnI3gABPiGsWaDLq73F4biJg"
											}
										],
										"url": {
											"raw": "{{baseURL}}tasks?page=0&size=20",
											"host": [
												"{{baseURL}}tasks"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "bad path",
							"item": [
								{
									"name": "no auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"pm.test(\"Status code name has string 'Unauthorized'\", function () {",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseURL}}asks?page=0&size=20",
											"host": [
												"{{baseURL}}asks"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "wrong method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Status code name has string 'Bad Request'\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseURL}}tasks?page=0&size=20",
											"host": [
												"{{baseURL}}tasks"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:8080/api/"
		}
	]
}